// Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Microsoft.HealthVault.RestApi.Generated
{
    using Microsoft.HealthVault;
    using Microsoft.HealthVault.RestApi;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Goals.
    /// </summary>
    public static partial class GoalsExtensions
    {
            /// <summary>
            /// Get an instance of a specific goal
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='goalId'>
            /// The goal identifier.
            /// </param>
            public static Goal GetById(this IGoals operations, System.Guid goalId)
            {
                return operations.GetByIdAsync(goalId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get an instance of a specific goal
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='goalId'>
            /// The goal identifier.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Goal> GetByIdAsync(this IGoals operations, System.Guid goalId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetByIdWithHttpMessagesAsync(goalId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete a goal instance
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='goalId'>
            /// The identifier of the goal to delete.
            /// </param>
            public static void Delete(this IGoals operations, System.Guid goalId)
            {
                operations.DeleteAsync(goalId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete a goal instance
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='goalId'>
            /// The identifier of the goal to delete.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IGoals operations, System.Guid goalId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(goalId, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Get a collection of the active goals
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='types'>
            /// The goal types(e.g Steps, CaloriesBurned) filter.
            /// </param>
            /// <param name='windowTypes'>
            /// The goal window types(e.g Daily, Weekly) filter.
            /// </param>
            public static GoalsResponse GetActive(this IGoals operations, string types = default(string), string windowTypes = default(string))
            {
                return operations.GetActiveAsync(types, windowTypes).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a collection of the active goals
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='types'>
            /// The goal types(e.g Steps, CaloriesBurned) filter.
            /// </param>
            /// <param name='windowTypes'>
            /// The goal window types(e.g Daily, Weekly) filter.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GoalsResponse> GetActiveAsync(this IGoals operations, string types = default(string), string windowTypes = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetActiveWithHttpMessagesAsync(types, windowTypes, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get a collection of all goals
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='types'>
            /// The goal types(e.g Steps, CaloriesBurned) filter.
            /// </param>
            /// <param name='windowTypes'>
            /// The goal window types(e.g Daily, Weekly) filter.
            /// </param>
            /// <param name='startDate'>
            /// The start date for date range filter.
            /// </param>
            /// <param name='endDate'>
            /// The end date for date range filter.
            /// </param>
            public static GoalsResponse Get(this IGoals operations, string types = default(string), string windowTypes = default(string), System.DateTime? startDate = default(System.DateTime?), System.DateTime? endDate = default(System.DateTime?))
            {
                return operations.GetAsync(types, windowTypes, startDate, endDate).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get a collection of all goals
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='types'>
            /// The goal types(e.g Steps, CaloriesBurned) filter.
            /// </param>
            /// <param name='windowTypes'>
            /// The goal window types(e.g Daily, Weekly) filter.
            /// </param>
            /// <param name='startDate'>
            /// The start date for date range filter.
            /// </param>
            /// <param name='endDate'>
            /// The end date for date range filter.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GoalsResponse> GetAsync(this IGoals operations, string types = default(string), string windowTypes = default(string), System.DateTime? startDate = default(System.DateTime?), System.DateTime? endDate = default(System.DateTime?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(types, windowTypes, startDate, endDate, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update/Replace a complete goal instance with no merge
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='goal'>
            /// The instance of the goal to update. The entire goal will be replaced with
            /// this version.
            /// </param>
            public static Goal Replace(this IGoals operations, Goal goal)
            {
                return operations.ReplaceAsync(goal).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update/Replace a complete goal instance with no merge
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='goal'>
            /// The instance of the goal to update. The entire goal will be replaced with
            /// this version.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Goal> ReplaceAsync(this IGoals operations, Goal goal, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.ReplaceWithHttpMessagesAsync(goal, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Post a collection of goal instances
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='goalsWrapper'>
            /// The collection of goal instances to create.
            /// </param>
            public static GoalsResponse Create(this IGoals operations, GoalsWrapper goalsWrapper)
            {
                return operations.CreateAsync(goalsWrapper).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Post a collection of goal instances
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='goalsWrapper'>
            /// The collection of goal instances to create.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GoalsResponse> CreateAsync(this IGoals operations, GoalsWrapper goalsWrapper, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.CreateWithHttpMessagesAsync(goalsWrapper, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Update collection of goal instances with merge
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='goalsWrapper'>
            /// The collection of goal instances to update. Only the fields present in the
            /// passed in model will be updated. All other fields and colelctions
            /// will be left, as is, unless invalid.
            /// </param>
            public static GoalsResponse Update(this IGoals operations, GoalsWrapper goalsWrapper)
            {
                return operations.UpdateAsync(goalsWrapper).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Update collection of goal instances with merge
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='goalsWrapper'>
            /// The collection of goal instances to update. Only the fields present in the
            /// passed in model will be updated. All other fields and colelctions
            /// will be left, as is, unless invalid.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<GoalsResponse> UpdateAsync(this IGoals operations, GoalsWrapper goalsWrapper, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
            {
                using (var _result = await operations.UpdateWithHttpMessagesAsync(goalsWrapper, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
